{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable camelcase */\nexport var FETCH_CARDS_START = 'FETCH_CARDS_START_STARTED';\nexport var FETCH_CARDS_SUCCESS = 'FETCH_CARDS_SUCCESS_STARTED';\nexport var FETCH_CARDS_FAIL = 'FETCH_CARDS_FAIL_STARTED';\nexport var initialState = {\n  fetchState: '',\n  card: []\n};\n\nvar cardReducer = function cardReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_CARDS_START:\n      {\n        return _objectSpread({}, state, {\n          fetchState: 'card_fetching'\n        });\n      }\n\n    case FETCH_CARDS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          fetchState: 'card_fetching_success'\n        });\n      }\n\n    case FETCH_CARDS_FAIL:\n      {\n        return _objectSpread({}, state, {\n          fetchState: 'card_fetching_fail'\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default cardReducer;","map":{"version":3,"sources":["D:/Desktop/snsol_project/frontend/redux/reducers/cardReducer.js"],"names":["FETCH_CARDS_START","FETCH_CARDS_SUCCESS","FETCH_CARDS_FAIL","initialState","fetchState","card","cardReducer","state","action","type"],"mappings":";;;;;;;;;;;;AAAA;AACA,OAAO,IAAMA,iBAAiB,GAAG,2BAA1B;AACP,OAAO,IAAMC,mBAAmB,GAAG,6BAA5B;AACP,OAAO,IAAMC,gBAAgB,GAAG,0BAAzB;AAEP,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,UAAU,EAAE,EADc;AAE1BC,EAAAA,IAAI,EAAE;AAFoB,CAArB;;AAKP,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,iBAAL;AAAwB;AACtB,iCAAYO,KAAZ;AAAmBH,UAAAA,UAAU,EAAE;AAA/B;AACD;;AACD,SAAKH,mBAAL;AAA0B;AACxB,iCAAYM,KAAZ;AAAmBH,UAAAA,UAAU,EAAE;AAA/B;AACD;;AACD,SAAKF,gBAAL;AAAuB;AACrB,iCAAYK,KAAZ;AAAmBH,UAAAA,UAAU,EAAE;AAA/B;AACD;;AACD;AAAS;AACP,eAAOG,KAAP;AACD;AAZH;AAcD,CAfD;;AAiBA,eAAeD,WAAf","sourcesContent":["/* eslint-disable camelcase */\r\nexport const FETCH_CARDS_START = 'FETCH_CARDS_START_STARTED';\r\nexport const FETCH_CARDS_SUCCESS = 'FETCH_CARDS_SUCCESS_STARTED';\r\nexport const FETCH_CARDS_FAIL = 'FETCH_CARDS_FAIL_STARTED';\r\n\r\nexport const initialState = {\r\n  fetchState: '',\r\n  card: [],\r\n};\r\n\r\nconst cardReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_CARDS_START: {\r\n      return { ...state, fetchState: 'card_fetching' };\r\n    }\r\n    case FETCH_CARDS_SUCCESS: {\r\n      return { ...state, fetchState: 'card_fetching_success' };\r\n    }\r\n    case FETCH_CARDS_FAIL: {\r\n      return { ...state, fetchState: 'card_fetching_fail' };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default cardReducer;\r\n"]},"metadata":{},"sourceType":"module"}