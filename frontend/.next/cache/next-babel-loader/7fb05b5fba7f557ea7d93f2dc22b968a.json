{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const THUNK_UP_COUNTER = 'THUNK_UP_COUNTER';\nexport const THUNK_DOWN_COUNTER = 'THUNK_DOWN_COUNTER';\nexport const thunkIncrement = () => ({\n  type: THUNK_UP_COUNTER,\n  value: 3\n});\nexport const thunkDecrement = () => ({\n  type: THUNK_DOWN_COUNTER,\n  value: 3\n});\nexport const thunkIncrementAsync = () => dispatch => {\n  setTimeout(() => {\n    // 1 초뒤 dispatch 합니다\n    dispatch(thunkIncrement());\n  }, 1000);\n};\nexport const thunkDecrementAsync = () => dispatch => {\n  setTimeout(() => {\n    // 1 초뒤 dispatch 합니다\n    dispatch(thunkDecrement());\n  }, 100);\n};\nexport const initialState = {\n  value: 1,\n  sagaValue: 1,\n  thunkValue: 1\n};\n\nconst thunkCounterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case THUNK_UP_COUNTER:\n      return _objectSpread({}, state, {\n        thunkValue: state.thunkValue + action.value\n      });\n\n    case THUNK_DOWN_COUNTER:\n      return _objectSpread({}, state, {\n        thunkValue: state.thunkValue - action.value\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default thunkCounterReducer;","map":{"version":3,"sources":["D:/Desktop/snsol_project/frontend/redux/reducers/thunkCounterReducer.js"],"names":["THUNK_UP_COUNTER","THUNK_DOWN_COUNTER","thunkIncrement","type","value","thunkDecrement","thunkIncrementAsync","dispatch","setTimeout","thunkDecrementAsync","initialState","sagaValue","thunkValue","thunkCounterReducer","state","action"],"mappings":";;;;;;AACA,OAAO,MAAMA,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAGP,OAAO,MAAMC,cAAc,GAAG,OAAO;AACnCC,EAAAA,IAAI,EAAEH,gBAD6B;AAEnCI,EAAAA,KAAK,EAAE;AAF4B,CAAP,CAAvB;AAKP,OAAO,MAAMC,cAAc,GAAG,OAAO;AACnCF,EAAAA,IAAI,EAAEF,kBAD6B;AAEnCG,EAAAA,KAAK,EAAE;AAF4B,CAAP,CAAvB;AAKP,OAAO,MAAME,mBAAmB,GAAG,MAAOC,QAAD,IAAc;AACrDC,EAAAA,UAAU,CAAC,MAAM;AACf;AACAD,IAAAA,QAAQ,CAACL,cAAc,EAAf,CAAR;AACD,GAHS,EAGP,IAHO,CAAV;AAID,CALM;AAOP,OAAO,MAAMO,mBAAmB,GAAG,MAAOF,QAAD,IAAc;AACrDC,EAAAA,UAAU,CAAC,MAAM;AACf;AACAD,IAAAA,QAAQ,CAACF,cAAc,EAAf,CAAR;AACD,GAHS,EAGP,GAHO,CAAV;AAID,CALM;AAOP,OAAO,MAAMK,YAAY,GAAG;AAC1BN,EAAAA,KAAK,EAAE,CADmB;AAE1BO,EAAAA,SAAS,EAAE,CAFe;AAG1BC,EAAAA,UAAU,EAAE;AAHc,CAArB;;AAMP,MAAMC,mBAAmB,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC5D,UAAQA,MAAM,CAACZ,IAAf;AACE,SAAKH,gBAAL;AACE,+BAAYc,KAAZ;AAAmBF,QAAAA,UAAU,EAAEE,KAAK,CAACF,UAAN,GAAmBG,MAAM,CAACX;AAAzD;;AACF,SAAKH,kBAAL;AACE,+BAAYa,KAAZ;AAAmBF,QAAAA,UAAU,EAAEE,KAAK,CAACF,UAAN,GAAmBG,MAAM,CAACX;AAAzD;;AACF;AACE,+BAAYU,KAAZ;AANJ;AAQD,CATD;;AAWA,eAAeD,mBAAf","sourcesContent":["\r\nexport const THUNK_UP_COUNTER = 'THUNK_UP_COUNTER';\r\nexport const THUNK_DOWN_COUNTER = 'THUNK_DOWN_COUNTER';\r\n\r\n\r\nexport const thunkIncrement = () => ({\r\n  type: THUNK_UP_COUNTER,\r\n  value: 3,\r\n});\r\n\r\nexport const thunkDecrement = () => ({\r\n  type: THUNK_DOWN_COUNTER,\r\n  value: 3,\r\n});\r\n\r\nexport const thunkIncrementAsync = () => (dispatch) => {\r\n  setTimeout(() => {\r\n    // 1 초뒤 dispatch 합니다\r\n    dispatch(thunkIncrement());\r\n  }, 1000);\r\n};\r\n\r\nexport const thunkDecrementAsync = () => (dispatch) => {\r\n  setTimeout(() => {\r\n    // 1 초뒤 dispatch 합니다\r\n    dispatch(thunkDecrement());\r\n  }, 100);\r\n};\r\n\r\nexport const initialState = {\r\n  value: 1,\r\n  sagaValue: 1,\r\n  thunkValue: 1,\r\n};\r\n\r\nconst thunkCounterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case THUNK_UP_COUNTER:\r\n      return { ...state, thunkValue: state.thunkValue + action.value };\r\n    case THUNK_DOWN_COUNTER:\r\n      return { ...state, thunkValue: state.thunkValue - action.value };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default thunkCounterReducer;\r\n"]},"metadata":{},"sourceType":"module"}