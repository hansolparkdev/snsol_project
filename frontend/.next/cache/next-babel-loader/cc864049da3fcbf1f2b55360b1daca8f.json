{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SET_USERNAME_STARTED, SET_PASSWORD_STARTED, SET_USERNAME, SET_PASSWORD, DO_LOGIN, DO_LOGIN_STARTED, DO_LOGIN_SUCCESS, DO_LOGIN_FAIL, DO_SESSION, DO_SESSION_STARTED } from '../reducers/sagaLoginReducer'; // import { SAGA_SIGN_IN } from '../reducers/sagaLoginReducer';\n\nconst setUsername = function* setUsername(action) {\n  yield put({\n    type: SET_USERNAME_STARTED,\n    payload: action.payload\n  });\n};\n\nconst setPassword = function* setPassword(action) {\n  yield put({\n    type: SET_PASSWORD_STARTED,\n    payload: action.payload\n  });\n};\n\nconst doLogin = function* doLogin(action) {\n  // yield console.log(action);\n  try {\n    yield put({\n      type: DO_LOGIN_STARTED\n    });\n    const json = {\n      uid: action.payload.username,\n      upw: action.payload.password\n    }; // console.log(json);\n\n    const {\n      data\n    } = yield call([axios, 'post'], 'http://127.0.0.1:3001/auth/signin', json, {\n      withCredentials: true // 쿠키를 주고받을 수 있게됨\n\n    });\n    yield put({\n      type: DO_LOGIN_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: DO_LOGIN_FAIL\n    });\n  }\n};\n\nconst doSession = function* doSession(action) {\n  try {\n    const {\n      data\n    } = yield call([axios, 'post'], 'http://127.0.0.1:3001/auth/check', {\n      withCredentials: true // 쿠키를 주고받을 수 있게됨\n\n    });\n    console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n}; // watch\n\n\nexport const watchSetUsername = function* watchSetUsername() {\n  yield takeEvery(SET_USERNAME, setUsername);\n};\nexport const watchSetUserpassword = function* watchSetUserpassword() {\n  yield takeEvery(SET_PASSWORD, setPassword);\n};\nexport const watchLogin = function* watchLogin() {\n  yield takeEvery(DO_LOGIN, doLogin);\n};\n\nconst watchSession = function* watchSession() {\n  yield takeEvery(DO_SESSION, doSession);\n};","map":{"version":3,"sources":["D:/Desktop/snsol_project/frontend/redux/sagas/login.js"],"names":["takeEvery","put","call","axios","SET_USERNAME_STARTED","SET_PASSWORD_STARTED","SET_USERNAME","SET_PASSWORD","DO_LOGIN","DO_LOGIN_STARTED","DO_LOGIN_SUCCESS","DO_LOGIN_FAIL","DO_SESSION","DO_SESSION_STARTED","setUsername","action","type","payload","setPassword","doLogin","json","uid","username","upw","password","data","withCredentials","e","doSession","console","log","watchSetUsername","watchSetUserpassword","watchLogin","watchSession"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,oBADF,EACwBC,oBADxB,EAEEC,YAFF,EAEgBC,YAFhB,EAE8BC,QAF9B,EAEwCC,gBAFxC,EAGEC,gBAHF,EAGoBC,aAHpB,EAGmCC,UAHnC,EAG+CC,kBAH/C,QAIO,8BAJP,C,CAKA;;AAEA,MAAMC,WAAW,GAAG,UAAUA,WAAV,CAAsBC,MAAtB,EAA8B;AAChD,QAAMd,GAAG,CAAC;AAAEe,IAAAA,IAAI,EAAEZ,oBAAR;AAA8Ba,IAAAA,OAAO,EAAEF,MAAM,CAACE;AAA9C,GAAD,CAAT;AACD,CAFD;;AAGA,MAAMC,WAAW,GAAG,UAAUA,WAAV,CAAsBH,MAAtB,EAA8B;AAChD,QAAMd,GAAG,CAAC;AAAEe,IAAAA,IAAI,EAAEX,oBAAR;AAA8BY,IAAAA,OAAO,EAAEF,MAAM,CAACE;AAA9C,GAAD,CAAT;AACD,CAFD;;AAGA,MAAME,OAAO,GAAG,UAAUA,OAAV,CAAkBJ,MAAlB,EAA0B;AACxC;AACA,MAAI;AACF,UAAMd,GAAG,CAAC;AAAEe,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAT;AACA,UAAMW,IAAI,GAAG;AACXC,MAAAA,GAAG,EAAEN,MAAM,CAACE,OAAP,CAAeK,QADT;AAEXC,MAAAA,GAAG,EAAER,MAAM,CAACE,OAAP,CAAeO;AAFT,KAAb,CAFE,CAMF;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMvB,IAAI,CAAC,CAACC,KAAD,EAAQ,MAAR,CAAD,EAAkB,mCAAlB,EAAuDiB,IAAvD,EAA6D;AACtFM,MAAAA,eAAe,EAAE,IADqE,CAC/D;;AAD+D,KAA7D,CAA3B;AAGA,UAAMzB,GAAG,CAAC;AAAEe,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAT;AACD,GAXD,CAWE,OAAOiB,CAAP,EAAU;AACV,UAAM1B,GAAG,CAAC;AAAEe,MAAAA,IAAI,EAAEL;AAAR,KAAD,CAAT;AACD;AACF,CAhBD;;AAiBA,MAAMiB,SAAS,GAAG,UAAUA,SAAV,CAAoBb,MAApB,EAA4B;AAC5C,MAAI;AACF,UAAM;AAAEU,MAAAA;AAAF,QAAW,MAAMvB,IAAI,CAAC,CAACC,KAAD,EAAQ,MAAR,CAAD,EAAkB,kCAAlB,EAAsD;AAC/EuB,MAAAA,eAAe,EAAE,IAD8D,CACxD;;AADwD,KAAtD,CAA3B;AAGAG,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACD,GALD,CAKE,OAAOE,CAAP,EAAU;AACVE,IAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACD;AACF,CATD,C,CAWA;;;AACA,OAAO,MAAMI,gBAAgB,GAAG,UAAUA,gBAAV,GAA6B;AAC3D,QAAM/B,SAAS,CAACM,YAAD,EAAeQ,WAAf,CAAf;AACD,CAFM;AAGP,OAAO,MAAMkB,oBAAoB,GAAG,UAAUA,oBAAV,GAAiC;AACnE,QAAMhC,SAAS,CAACO,YAAD,EAAeW,WAAf,CAAf;AACD,CAFM;AAIP,OAAO,MAAMe,UAAU,GAAG,UAAUA,UAAV,GAAuB;AAC/C,QAAMjC,SAAS,CAACQ,QAAD,EAAWW,OAAX,CAAf;AACD,CAFM;;AAIP,MAAMe,YAAY,GAAG,UAAUA,YAAV,GAAyB;AAC5C,QAAMlC,SAAS,CAACY,UAAD,EAAagB,SAAb,CAAf;AACD,CAFD","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  SET_USERNAME_STARTED, SET_PASSWORD_STARTED,\r\n  SET_USERNAME, SET_PASSWORD, DO_LOGIN, DO_LOGIN_STARTED,\r\n  DO_LOGIN_SUCCESS, DO_LOGIN_FAIL, DO_SESSION, DO_SESSION_STARTED,\r\n} from '../reducers/sagaLoginReducer';\r\n// import { SAGA_SIGN_IN } from '../reducers/sagaLoginReducer';\r\n\r\nconst setUsername = function* setUsername(action) {\r\n  yield put({ type: SET_USERNAME_STARTED, payload: action.payload });\r\n};\r\nconst setPassword = function* setPassword(action) {\r\n  yield put({ type: SET_PASSWORD_STARTED, payload: action.payload });\r\n};\r\nconst doLogin = function* doLogin(action) {\r\n  // yield console.log(action);\r\n  try {\r\n    yield put({ type: DO_LOGIN_STARTED });\r\n    const json = {\r\n      uid: action.payload.username,\r\n      upw: action.payload.password,\r\n    };\r\n    // console.log(json);\r\n    const { data } = yield call([axios, 'post'], 'http://127.0.0.1:3001/auth/signin', json, {\r\n      withCredentials: true, // 쿠키를 주고받을 수 있게됨\r\n    });\r\n    yield put({ type: DO_LOGIN_SUCCESS });\r\n  } catch (e) {\r\n    yield put({ type: DO_LOGIN_FAIL });\r\n  }\r\n};\r\nconst doSession = function* doSession(action) {\r\n  try {\r\n    const { data } = yield call([axios, 'post'], 'http://127.0.0.1:3001/auth/check', {\r\n      withCredentials: true, // 쿠키를 주고받을 수 있게됨\r\n    });\r\n    console.log(data);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\n// watch\r\nexport const watchSetUsername = function* watchSetUsername() {\r\n  yield takeEvery(SET_USERNAME, setUsername);\r\n};\r\nexport const watchSetUserpassword = function* watchSetUserpassword() {\r\n  yield takeEvery(SET_PASSWORD, setPassword);\r\n};\r\n\r\nexport const watchLogin = function* watchLogin() {\r\n  yield takeEvery(DO_LOGIN, doLogin);\r\n};\r\n\r\nconst watchSession = function* watchSession() {\r\n  yield takeEvery(DO_SESSION, doSession);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}