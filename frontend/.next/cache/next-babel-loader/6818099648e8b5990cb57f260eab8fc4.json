{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from 'redux'; // Action Types\n\nexport const INCREMENT_COUNTER = 'INCREMENT_COUNTER';\nexport const DECREMENT_COUNTER = 'DECREMENT_COUNTER';\nexport const AGE_UP = 'AGE_UP';\nexport const AGE_DOWN = 'AGE_DOWN'; // Action Creator\n\nexport const increment = () => ({\n  type: INCREMENT_COUNTER\n});\nexport const decrement = () => ({\n  type: DECREMENT_COUNTER\n});\nexport const ageIncrement = () => ({\n  type: INCREMENT_COUNTER\n});\nexport const ageDecrement = () => ({\n  type: INCREMENT_COUNTER\n});\nexport const initialState = {\n  value: 1,\n  age: 20\n};\n\nconst ageReducer = (state = initialState, action) => {\n  const newState = _objectSpread({}, state);\n\n  switch (action.type) {\n    case AGE_UP:\n      newState.age += action.value;\n      break;\n\n    case AGE_DOWN:\n      newState.age -= action.value;\n      break;\n\n    default:\n      return newState;\n  }\n\n  return newState;\n};\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return _objectSpread({}, state, {\n        value: state.value + 1\n      });\n\n    case DECREMENT_COUNTER:\n      return _objectSpread({}, state, {\n        value: state.value - 1\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n  age: ageReducer\n});\nexport default rootReducer;","map":{"version":3,"sources":["D:/Desktop/snsol_project/frontend/redux/reducers/rootReducer.js"],"names":["combineReducers","INCREMENT_COUNTER","DECREMENT_COUNTER","AGE_UP","AGE_DOWN","increment","type","decrement","ageIncrement","ageDecrement","initialState","value","age","ageReducer","state","action","newState","counterReducer","rootReducer","counter"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC,C,CAEA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,MAAM,GAAG,QAAf;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB,C,CAEP;;AACA,OAAO,MAAMC,SAAS,GAAG,OAAO;AAC9BC,EAAAA,IAAI,EAAEL;AADwB,CAAP,CAAlB;AAIP,OAAO,MAAMM,SAAS,GAAG,OAAO;AAC9BD,EAAAA,IAAI,EAAEJ;AADwB,CAAP,CAAlB;AAIP,OAAO,MAAMM,YAAY,GAAG,OAAO;AACjCF,EAAAA,IAAI,EAAEL;AAD2B,CAAP,CAArB;AAIP,OAAO,MAAMQ,YAAY,GAAG,OAAO;AACjCH,EAAAA,IAAI,EAAEL;AAD2B,CAAP,CAArB;AAIP,OAAO,MAAMS,YAAY,GAAG;AAC1BC,EAAAA,KAAK,EAAE,CADmB;AAE1BC,EAAAA,GAAG,EAAE;AAFqB,CAArB;;AAKP,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACnD,QAAMC,QAAQ,qBAAQF,KAAR,CAAd;;AACA,UAAQC,MAAM,CAACT,IAAf;AACE,SAAKH,MAAL;AACEa,MAAAA,QAAQ,CAACJ,GAAT,IAAgBG,MAAM,CAACJ,KAAvB;AACA;;AACF,SAAKP,QAAL;AACEY,MAAAA,QAAQ,CAACJ,GAAT,IAAgBG,MAAM,CAACJ,KAAvB;AACA;;AACF;AACE,aAAOK,QAAP;AARJ;;AAUA,SAAOA,QAAP;AACD,CAbD;;AAeA,MAAMC,cAAc,GAAG,CAACH,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACT,IAAf;AACE,SAAKL,iBAAL;AACE,+BAAYa,KAAZ;AAAmBH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAc;AAAxC;;AACF,SAAKT,iBAAL;AACE,+BAAYY,KAAZ;AAAmBH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAc;AAAxC;;AACF;AACE,+BAAYG,KAAZ;AANJ;AAQD,CATD;;AAWA,MAAMI,WAAW,GAAGlB,eAAe,CAAC;AAClCmB,EAAAA,OAAO,EAAEF,cADyB;AAElCL,EAAAA,GAAG,EAAEC;AAF6B,CAAD,CAAnC;AAKA,eAAeK,WAAf","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\n// Action Types\r\nexport const INCREMENT_COUNTER = 'INCREMENT_COUNTER';\r\nexport const DECREMENT_COUNTER = 'DECREMENT_COUNTER';\r\nexport const AGE_UP = 'AGE_UP';\r\nexport const AGE_DOWN = 'AGE_DOWN';\r\n\r\n// Action Creator\r\nexport const increment = () => ({\r\n  type: INCREMENT_COUNTER,\r\n});\r\n\r\nexport const decrement = () => ({\r\n  type: DECREMENT_COUNTER,\r\n});\r\n\r\nexport const ageIncrement = () => ({\r\n  type: INCREMENT_COUNTER,\r\n});\r\n\r\nexport const ageDecrement = () => ({\r\n  type: INCREMENT_COUNTER,\r\n});\r\n\r\nexport const initialState = {\r\n  value: 1,\r\n  age: 20,\r\n};\r\n\r\nconst ageReducer = (state = initialState, action) => {\r\n  const newState = { ...state };\r\n  switch (action.type) {\r\n    case AGE_UP:\r\n      newState.age += action.value;\r\n      break;\r\n    case AGE_DOWN:\r\n      newState.age -= action.value;\r\n      break;\r\n    default:\r\n      return newState;\r\n  }\r\n  return newState;\r\n};\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INCREMENT_COUNTER:\r\n      return { ...state, value: state.value + 1 };\r\n    case DECREMENT_COUNTER:\r\n      return { ...state, value: state.value - 1 };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer,\r\n  age: ageReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}